xlim = c(-20,59),
ylim = c(35,71))+
ggtitle("Movies by Country")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
#
ggplot(
data = movies,aes(Longitude,Latitude,aplha = ..level..),
geom = 'polygon',fill = 'blue')+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
geom_density2d()+
coord_cartesian(
xlim = c(-20,59),
ylim = c(35,71))+
ggtitle("Movies by Country")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
#
ggplot(
data = movies,aes(Longitude,Latitude,aplha = ..level..))+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
geom_density2d(geom = 'polygon',fill = 'blue')+
coord_cartesian(
xlim = c(-20,59),
ylim = c(35,71))+
ggtitle("Movies by Country")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
#
ggplot(
data = movies)+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
geom_density2d(aes(Longitude,Latitude,aplha = ..level..),
geom = 'polygon',fill = 'blue')+
coord_cartesian(
xlim = c(-20,59),
ylim = c(35,71))+
ggtitle("Movies by Country")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
#Read Countries from CSV file
countries <- read.csv('Countries.csv')
head(countries)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude,size = count))+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude,size = count))+
geom_points()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude,size = count))+
geom_point()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude,size = count))+
scale_size_area(max_size = 5)+
geom_point()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
rlang::last_error()
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude,size = count))+
scale_size_area(max_size = 5)+
geom_polygon()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude))+
scale_size_area(max_size = 5)+
geom_polygon()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude))+
geom_polygon()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries,
aes(Longitude,Latitude))+
geom_point()+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Create a bubble map
ggplot(
data = countries)+
geom_point(aes(Longitude,Latitude))+
borders(
database = "world",
colour = "grey60",
fill = 'grey90')+
ggtitle("Base map of the world")+
xlab("")+
ylab('')+
theme(
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
head(hierarchy)
setwd("E:/Coding/Data anaylsis/ITI-Data-Analytics-Visualization-Specialist/R files/Mastering data visualization")
#read the data
hierarchy <- read.csv('Hierarchy.csv')
head(hierarchy)
#Create a tree path column
hierarchy$Path <- paste(
'All',
hierarchy$Continent,
hierarchy$Coutry,
sep = '/'
)
head(hierarchy)
install.packages("data.tree")
#Create a tree from a a dataframe
tree <- as.Node(
x = hierarchy
pathName ='Path')
#Create a tree from a a dataframe
tree <- as.Node(hierarchy)
library(treemap)
library(data.tree)
#Create a tree from a a dataframe
tree <- as.Node(hierarchy)
#Create a tree from a a dataframe
tree <- as.Node(hierarchy,pathName = 'Path')
tree
#Create a tree path column
hierarchy$Path <- paste(
'All',
hierarchy$Continent,
hierarchy$Coutry,
sep = '/'
)
hierarchy$Path
#Create a tree path column
hierarchy$Path <- paste(
'All',
hierarchy$Continent,
hierarchy$Country,
sep = '/'
)
hierarchy$Path
#Create a tree from a a dataframe
tree <- as.Node(hierarchy,pathName = 'Path')
tree
#plotting the tree
plot(tree)
install.packages("DiagrammeR")
#plotting the tree
plot(tree)
install.packages("igraph")
#Create tree graph
treeGraph<- as.igraph(tree)
#Create tree graph
library(igraph)
library(hexbin)
detach("package:hexbin", unload = TRUE)
#Create tree graph
library(igraph)
treeGraph<- as.igraph(tree)
treeGraph
#plotting the graph
plot(x = treeGrah,
main = 'Geographic Distribution Hierarchy')
#plotting the graph
plot(x = treeGraph,
main = 'Geographic Distribution Hierarchy')
#Create a tree path column
hierarchy$Path <- paste(
'World',
hierarchy$Continent,
hierarchy$Country,
sep = '/'
)
#plotting the graph
plot(x = treeGraph,
main = 'Geographic Distribution Hierarchy')
#Create a tree from a a dataframe
tree <- as.Node(hierarchy,pathName = 'Path')
treeGraph<- as.igraph(tree)
#plotting the graph
plot(x = treeGraph,
main = 'Geographic Distribution Hierarchy')
#add ron name for dendro lables
row.names(hierarchy) <- hierarchy$Country
hierarchy$Country
hierarchy
# Creat distance matrix
Distance( <- dist(hierarchy[,c[3,4]]))
# Creat distance matrix
Distance <- dist(hierarchy[,c[3,4]])
# Creat distance matrix
Distance <- dist(hierarchy[,c[3,4]])
hierarchy[,c[3,4]]
# Creat distance matrix
Distance <- dist(hierarchy[,d[3,4]])
# Creat distance matrix
Distance <- hierarchy[,d[3,4]]
# Creat distance matrix
distance <- dist(hierarchy[,c(3,4)])
# Creat distance matrix
Distance <- dist(hierarchy[,c[3,4]])
# Creat distance matrix
Distance <- dist(hierarchy[,c(3,4)])
Distance
# Creat hierarchical clusters
clusters <- hclust(distance)
clusters
plot(clusters,
main = 'Heirarchal clusters of countries')
install.packages("ape")
library(ape)
detach("package:ape", unload = TRUE)
library(ape)
detach("package:ape", unload = TRUE)
library(ape)
library(ape)
#Create a phylogenice tree
phylo <- as.phylo(clusters)
phylo
#Create a radial table
plot(phylo,
type 'fan')
#Create a radial table
plot(phylo,
type 'fan')
#Create a radial table
plot(phylo)
#Create a radial table
plot(phylo,
type = "fan")
#Create a radial table
plot(phylo,
type = 'fan')
library(treemap)
install.packages("treemap")
library(treemap)
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
)
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vsize = 'count')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vsize = 'count')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'count')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'count')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count',
vColor = 'Continent')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count',
vColor = 'Continent',
type = 'Categorical')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count',
vColor = 'Continent',
type = 'categorical')
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count',
vColor = 'Continent',
type = 'categorical',
title = 'Count of Movies by Continent and Country'))
# Create a frequeny tree map
treemap(
dtf = hierarchy,
index = c('Continent',"Country"),
vSize = 'Count',
vColor = 'Continent',
type = 'categorical',
title = 'Count of Movies by Continent and Country')
# Create a treemap
treemap(
dtf = hierarchy,
index = c("Continent", "Country"),
vSize = "Count",
vColor = "Box.Office",
type = "value",
palette = c("#FF681D", "#FFE1D2"),
title = "Count of Movies and Average Box Office Revenue\nby Continent and Country",
title.legend = "Average Box Office Revenue ($M)")
# Create a treemap
treemap(
dtf = hierarchy,
index = c("Continent", "Country"),
vSize = "Count",
vColor = "Box.Office",
type = "value",
title = "Count of Movies and Average Box Office Revenue\nby Continent and Country",
title.legend = "Average Box Office Revenue ($M)")
# Create a treemap
treemap(
dtf = hierarchy,
index = c("Continent", "Country"),
vSize = "Count",
vColor = "Box.Office",
type = "value",
palette = c("#FF681D", "#FFE1D2"),
title = "Count of Movies and Average Box Office Revenue\nby Continent and Country",
title.legend = "Average Box Office Revenue ($M)")
